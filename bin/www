#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app/');
var debug = require('debug')('express:server');
var http = require('http');
var net = require('net');
var socketService = require('../app/common/socketService');
var cluster = require('cluster');
var nCPUs = require('os').cpus().length;
var sio_redis = require('socket.io-redis');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '2223');
// app.set('port', port);

/**
 * Create HTTP server.
 */

if (cluster.isMaster) {
	console.log(`Master ${process.pid} is running`);

	var workers = [];

	var spawn = function (i) {
		workers[i] = cluster.fork();
	}

	for (var i = 0; i < nCPUs; i++) {
		spawn(i);
	}

	var worker_index = function (ip, len) {
		var s = '';
		for (var i = 0, _len = ip.length; i < _len; i++) {
			if (!isNaN(ip[i])) {
				s += ip[i];
			}
		}

		return Number(s) % len;
	}

	var server = net.createServer({ pauseOnConnect: true}, function (connection) {
		console.log('connection addr', connection.remoteAddress);
		var worker = workers[worker_index(connection.remoteAddress, nCPUs)];
		console.log('workers', workers.length);
		worker.send('sticky-session:connection', connection);
	}).listen(port);
} else {
	var server = app.listen(0, 'localhost');
	var io = require('socket.io')(server);
	io.adapter(sio_redis({host: 'localhost', port: 6379 }));
	socketService.setSocketIo(io);

    process.on('message', function(message, connection) {
        if (message !== 'sticky-session:connection') {
            return;
        }

        // Emulate a connection event on the server by emitting the
        // event with the connection the master sent us.
        server.emit('connection', connection);

        connection.resume();
    });
}


/**
 * Listen on provided port, on all network interfaces.
 */


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
